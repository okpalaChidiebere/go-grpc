// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: todo.proto

package go_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TodoServiceClient is the client API for TodoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TodoServiceClient interface {
	// Creates a single Todo
	CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*CreateTodoResponse, error)
	// Get all the created Todos. Takes in no or empty request as argument
	ReadTodos(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadTodosResponse, error)
	//This method will stream back the list of todos back to the user
	//This is better than sending all the list at once back to the user
	ReadTodosStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (TodoService_ReadTodosStreamClient, error)
	AddPhoto(ctx context.Context, opts ...grpc.CallOption) (TodoService_AddPhotoClient, error)
}

type todoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoServiceClient(cc grpc.ClientConnInterface) TodoServiceClient {
	return &todoServiceClient{cc}
}

func (c *todoServiceClient) CreateTodo(ctx context.Context, in *CreateTodoRequest, opts ...grpc.CallOption) (*CreateTodoResponse, error) {
	out := new(CreateTodoResponse)
	err := c.cc.Invoke(ctx, "/todo.TodoService/CreateTodo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) ReadTodos(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ReadTodosResponse, error) {
	out := new(ReadTodosResponse)
	err := c.cc.Invoke(ctx, "/todo.TodoService/ReadTodos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *todoServiceClient) ReadTodosStream(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (TodoService_ReadTodosStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[0], "/todo.TodoService/ReadTodosStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceReadTodosStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type TodoService_ReadTodosStreamClient interface {
	Recv() (*TodoItem, error)
	grpc.ClientStream
}

type todoServiceReadTodosStreamClient struct {
	grpc.ClientStream
}

func (x *todoServiceReadTodosStreamClient) Recv() (*TodoItem, error) {
	m := new(TodoItem)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *todoServiceClient) AddPhoto(ctx context.Context, opts ...grpc.CallOption) (TodoService_AddPhotoClient, error) {
	stream, err := c.cc.NewStream(ctx, &TodoService_ServiceDesc.Streams[1], "/todo.TodoService/AddPhoto", opts...)
	if err != nil {
		return nil, err
	}
	x := &todoServiceAddPhotoClient{stream}
	return x, nil
}

type TodoService_AddPhotoClient interface {
	Send(*AddTodoPhotoRequest) error
	CloseAndRecv() (*AddTodoPhotoResponse, error)
	grpc.ClientStream
}

type todoServiceAddPhotoClient struct {
	grpc.ClientStream
}

func (x *todoServiceAddPhotoClient) Send(m *AddTodoPhotoRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *todoServiceAddPhotoClient) CloseAndRecv() (*AddTodoPhotoResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(AddTodoPhotoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TodoServiceServer is the server API for TodoService service.
// All implementations must embed UnimplementedTodoServiceServer
// for forward compatibility
type TodoServiceServer interface {
	// Creates a single Todo
	CreateTodo(context.Context, *CreateTodoRequest) (*CreateTodoResponse, error)
	// Get all the created Todos. Takes in no or empty request as argument
	ReadTodos(context.Context, *emptypb.Empty) (*ReadTodosResponse, error)
	//This method will stream back the list of todos back to the user
	//This is better than sending all the list at once back to the user
	ReadTodosStream(*emptypb.Empty, TodoService_ReadTodosStreamServer) error
	AddPhoto(TodoService_AddPhotoServer) error
	mustEmbedUnimplementedTodoServiceServer()
}

// UnimplementedTodoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTodoServiceServer struct {
}

func (UnimplementedTodoServiceServer) CreateTodo(context.Context, *CreateTodoRequest) (*CreateTodoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTodo not implemented")
}
func (UnimplementedTodoServiceServer) ReadTodos(context.Context, *emptypb.Empty) (*ReadTodosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadTodos not implemented")
}
func (UnimplementedTodoServiceServer) ReadTodosStream(*emptypb.Empty, TodoService_ReadTodosStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ReadTodosStream not implemented")
}
func (UnimplementedTodoServiceServer) AddPhoto(TodoService_AddPhotoServer) error {
	return status.Errorf(codes.Unimplemented, "method AddPhoto not implemented")
}
func (UnimplementedTodoServiceServer) mustEmbedUnimplementedTodoServiceServer() {}

// UnsafeTodoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoServiceServer will
// result in compilation errors.
type UnsafeTodoServiceServer interface {
	mustEmbedUnimplementedTodoServiceServer()
}

func RegisterTodoServiceServer(s grpc.ServiceRegistrar, srv TodoServiceServer) {
	s.RegisterService(&TodoService_ServiceDesc, srv)
}

func _TodoService_CreateTodo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTodoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).CreateTodo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TodoService/CreateTodo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).CreateTodo(ctx, req.(*CreateTodoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_ReadTodos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoServiceServer).ReadTodos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todo.TodoService/ReadTodos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoServiceServer).ReadTodos(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _TodoService_ReadTodosStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TodoServiceServer).ReadTodosStream(m, &todoServiceReadTodosStreamServer{stream})
}

type TodoService_ReadTodosStreamServer interface {
	Send(*TodoItem) error
	grpc.ServerStream
}

type todoServiceReadTodosStreamServer struct {
	grpc.ServerStream
}

func (x *todoServiceReadTodosStreamServer) Send(m *TodoItem) error {
	return x.ServerStream.SendMsg(m)
}

func _TodoService_AddPhoto_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TodoServiceServer).AddPhoto(&todoServiceAddPhotoServer{stream})
}

type TodoService_AddPhotoServer interface {
	SendAndClose(*AddTodoPhotoResponse) error
	Recv() (*AddTodoPhotoRequest, error)
	grpc.ServerStream
}

type todoServiceAddPhotoServer struct {
	grpc.ServerStream
}

func (x *todoServiceAddPhotoServer) SendAndClose(m *AddTodoPhotoResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *todoServiceAddPhotoServer) Recv() (*AddTodoPhotoRequest, error) {
	m := new(AddTodoPhotoRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// TodoService_ServiceDesc is the grpc.ServiceDesc for TodoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todo.TodoService",
	HandlerType: (*TodoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTodo",
			Handler:    _TodoService_CreateTodo_Handler,
		},
		{
			MethodName: "ReadTodos",
			Handler:    _TodoService_ReadTodos_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReadTodosStream",
			Handler:       _TodoService_ReadTodosStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "AddPhoto",
			Handler:       _TodoService_AddPhoto_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "todo.proto",
}
